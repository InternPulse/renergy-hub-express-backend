// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int               @id @default(autoincrement())
  firstName                  String
  lastName                   String
  username                   String?           @unique
  email                      String            @unique
  password                   String?
  userType                   Role?
  registerType               String?
  socialId                   String?           @unique
  registrationDate           DateTime          @default(now())
  phoneNumber                String?
  confirmPassword            String?
  isVerified                 String            @default("false")
  verificationToken          String?
  verificationTokenExpiresAt DateTime?
  resetToken                 String?
  resetTokenExpiresAt        DateTime?
  cart                       Cart[]
  notifications              Notification[]
  orders                     Order[]
  orderReturns               OrderReturn[]
  payments                   Payment[]
  products                   Product[]
  reviews                    Review[]
  addresses                  ShippingAddress[]
  wishlist                   WishList[]

  @@unique([username, email])
}

model Notification {
  id      Int    @id @default(autoincrement())
  message String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
}

model WishList {
  id        Int     @id @default(autoincrement())
  productId Int
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Cart {
  id         Int         @id @default(autoincrement())
  productId  Int
  userId     Int
  price      Decimal
  quantity   Int
  product    Product     @relation(fields: [productId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  rating     Int
  comment    String
  datePosted DateTime
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ShippingAddress {
  id          Int     @id @default(autoincrement())
  userId      Int    
  state       String
  addressLine String
  zipCode     String
  city        String
  country     String
  isDefault   Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
  order       Order[] 
}

model Payment {
  id              Int      @id @default(autoincrement())
  userId          Int
  orderId         Int
  paymentId       String
  status          PaymentStatus @default(PENDING)
  amount          Decimal
  paymentDate     DateTime
  method          PaymentMethod @default(ONLINE)
  user            User     @relation(fields: [userId], references: [id])
  order           Order    @relation(fields: [orderId], references: [id])
}

model Order {
  id              Int               @id @default(autoincrement())
  userId          Int
  shippingAddressId          Int   
  shippingOptionId           Int    
  orderNumber     String
  orderDate       DateTime          @default(now())
  paymentStatus   PaymentStatus     @default(PENDING)
  orderStatus     OrderStatus       @default(PENDING)
  totalAmount     Decimal
  user            User              @relation(fields: [userId], references: [id])
  shippingAddress ShippingAddress   @relation(fields: [shippingAddressId], references: [id])
  shippingOption  ShippingOption    @relation(fields: [shippingOptionId], references: [id])
  orderItems      OrderItem[]
  orderReturns    OrderReturn[]
  payments        Payment[]
  
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id           Int                  @id @default(autoincrement())
  categoryId   Int
  userId       Int
  name         String
  description  String
  price        Decimal
  stock        Int
  image        String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  cart         Cart[]
  orderItems   OrderItem[]
  orderReturns OrderReturn[]
  category     Category             @relation(fields: [categoryId], references: [id])
  user         User                 @relation(fields: [userId], references: [id])
  productInfo  ProductInformation[]
  reviews      Review[]
  wishlist     WishList[]
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String
  description  String
  products     Product[]
}

model ProductInformation {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model ShippingOption {
  id      Int     @id @default(autoincrement())
  name    String
  amount  Decimal
  orders   Order[] 
}

model OrderReturn {
  id        Int     @id @default(autoincrement())
  productId Int
  userId    Int
  orderId   Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  ONLINE
  CASH
}

enum Role {
  ADMIN
  CUSTOMER
  VENDOR
}
